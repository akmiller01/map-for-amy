,"text"
,"bool"
,"integer"
,"text"
,"bool"
,"integer"
,"text"
,"integer"
,"text"
,"text"
,"integer"
,"bool"
,"integer"
,"bool"
,"text"
,"text"
,"text"
,"float8"
,"float8"
,"integer"
,"integer"
,"integer"
,"integer"
,"integer"
)
total_count = fromJSON("http://datastore.iatistandard.org/api/1/access/activity?limit=0")["total-count"][[1]]
index = 0
url_con = curl(base_url)
open(url_con, "r")
pb = txtProgressBar(max=total_count, style=3)
dat_mat = matrix(rep(0,56*56))
?matrix
dat_mat = matrix(rep(0,56*56),ncol=56)
dataChunk = data.frame(matrix(rep(0,56*56),ncol=56))
View(dataChunk)
dbWriteTable(con, name = table.quote, value = dataChunk, row.names = F, overwrite=(index==0), append=(index>0), field.types=iati.field.types)
dbWriteTable(con, name = table.quote, value = dataChunk, row.names = F, overwrite=(index==0), append=(index>0))
dat = read.csv("http://datastore.iatistandard.org/api/1/access/activity.csv?limit=10000")
for(i in 1:length(dat)){print(dbDataType(con,dat[,i]))}
list.of.packages <- c("data.table", "here", "RPostgreSQL","jsonlite","curl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.us.r-project.org")
lapply(list.of.packages, require, character.only=T)
# Only works while running with `Rscript` from repo root, use commented below if running manually
# script.dir <- here()
# script.dir = "/src"
script.dir = "/home/alex/git/ddw-analyst-ui"
source(paste0(script.dir,"/data_updates/R/constants.R"))
drv = dbDriver("PostgreSQL")
# con = dbConnect(drv,
#                 dbname=db.dbname
#                 ,user=db.user
#                 ,password=db.password
#                 ,host=db.host
#                 ,port=db.port)
con = dbConnect(drv,
dbname="analyst_ui"
,user="postgres")
table.quote = c("repo","iati_datastore")
base_url = "http://datastore.iatistandard.org/api/1/access/activity.csv?stream=True"
chunk.size=1000
iati.col.names = c(
"iati_identifier"
,"hierarchy"
,"last_updated_datetime"
,"default_language"
,"reporting_org"
,"reporting_org_ref"
,"reporting_org_type"
,"reporting_org_type_code"
,"title"
,"description"
,"activity_status_code"
,"start_planned"
,"end_planned"
,"start_actual"
,"end_actual"
,"participating_org_Accountable"
,"participating_org_ref_Accountable"
,"participating_org_type_Accountable"
,"participating_org_type_code_Accountable"
,"participating_org_Funding"
,"participating_org_ref_Funding"
,"participating_org_type_Funding"
,"participating_org_type_code_Funding"
,"participating_org_Extending"
,"participating_org_ref_Extending"
,"participating_org_type_Extending"
,"participating_org_type_code_Extending"
,"participating_org_Implementing"
,"participating_org_ref_Implementing"
,"participating_org_type_Implementing"
,"participating_org_type_code_Implementing"
,"recipient_country_code"
,"recipient_country"
,"recipient_country_percentage"
,"recipient_region_code"
,"recipient_region"
,"recipient_region_percentage"
,"sector_code"
,"sector"
,"sector_percentage"
,"sector_vocabulary"
,"sector_vocabulary_code"
,"collaboration_type_code"
,"default_finance_type_code"
,"default_flow_type_code"
,"default_aid_type_code"
,"default_tied_status_code"
,"default_currency"
,"currency"
,"total_Commitment"
,"total_Disbursement"
,"total_Expenditure"
,"total_IncomingFunds"
,"total_InterestRepayment"
,"total_LoanRepayment"
,"total_Reimbursement"
)
iati.field.types=c(
"text"
,"integer"
,"text"
,"text"
,"text"
,"text"
,"text"
,"integer"
,"text"
,"text"
,"integer"
,"text"
,"text"
,"text"
,"text"
,"text"
,"integer"
,"text"
,"integer"
,"text"
,"text"
,"text"
,"integer"
,"text"
,"text"
,"text"
,"integer"
,"text"
,"text"
,"text"
,"integer"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"integer"
,"integer"
,"integer"
,"text"
,"text"
,"text"
,"text"
,"float8"
,"float8"
,"float8"
,"float8"
,"integer"
,"integer"
,"integer"
)
total_count = fromJSON("http://datastore.iatistandard.org/api/1/access/activity?limit=0")["total-count"][[1]]
index = 0
url_con = curl(base_url)
open(url_con, "r")
pb = txtProgressBar(max=total_count, style=3)
while(isIncomplete(url_con)){
dataChunk = read.delim(url_con, nrows=chunk.size, skip=0, header=(index==0), sep=",", col.names=iati.col.names, as.is=T, na.strings=c(""), quote = "\"")
dbWriteTable(con, name = table.quote, value = dataChunk, row.names = F, overwrite=(index==0), append=(index>0), field.types=iati.field.types)
index = index + nrow(dataChunk)
setTxtProgressBar(pb, index)
rm(dataChunk)
}
dbWriteTable(con, name = table.quote, value = dataChunk, row.names = F, overwrite=(index==0), append=(index>0), field.types=iati.field.types)
dbWriteTable(con, name = table.quote, value = dataChunk, row.names = F, overwrite=(index==0), append=(index>0), field.types=iati.field.types)
dataChunk = read.delim(url_con, nrows=chunk.size, skip=0, header=(index==0), sep=",", col.names=iati.col.names, as.is=T, na.strings=c(""), quote = "\"")
dbWriteTable(con, name = table.quote, value = dataChunk, row.names = F, overwrite=(index==0), append=(index>0), field.types=iati.field.types)
dataChunk = read.csv(url_con, nrows=chunk.size, skip=0, header=(index==0), col.names=iati.col.names, as.is=T, na.strings=c(""))
dbWriteTable(con, name = table.quote, value = dataChunk, row.names = F, overwrite=(index==0), append=(index>0), field.types=iati.field.types)
dataChunk = read.csv(url_con, nrows=chunk.size, skip=0, header=(index==0), col.names=iati.col.names, as.is=T, na.strings=c(""))
dbWriteTable(con, name = table.quote, value = dataChunk, row.names = F, overwrite=(index==0), append=(index>0))
dataChunk = read.csv(url_con, nrows=chunk.size, skip=0, header=(index==0), col.names=iati.col.names, as.is=T, na.strings=c(""))
dbWriteTable(con, name = table.quote, value = dataChunk, row.names = F, overwrite=(index==0), append=(index>0))
list.of.packages <- c("data.table", "here", "RPostgreSQL","jsonlite","curl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.us.r-project.org")
lapply(list.of.packages, require, character.only=T)
# Only works while running with `Rscript` from repo root, use commented below if running manually
# script.dir <- here()
# script.dir = "/src"
script.dir = "/home/alex/git/ddw-analyst-ui"
source(paste0(script.dir,"/data_updates/R/constants.R"))
drv = dbDriver("PostgreSQL")
# con = dbConnect(drv,
#                 dbname=db.dbname
#                 ,user=db.user
#                 ,password=db.password
#                 ,host=db.host
#                 ,port=db.port)
con = dbConnect(drv,
dbname="analyst_ui"
,user="postgres")
table.quote = c("repo","iati_datastore")
base_url = "http://datastore.iatistandard.org/api/1/access/activity.csv?stream=True"
chunk.size=1000
iati.col.names = c(
"iati_identifier"
,"hierarchy"
,"last_updated_datetime"
,"default_language"
,"reporting_org"
,"reporting_org_ref"
,"reporting_org_type"
,"reporting_org_type_code"
,"title"
,"description"
,"activity_status_code"
,"start_planned"
,"end_planned"
,"start_actual"
,"end_actual"
,"participating_org_Accountable"
,"participating_org_ref_Accountable"
,"participating_org_type_Accountable"
,"participating_org_type_code_Accountable"
,"participating_org_Funding"
,"participating_org_ref_Funding"
,"participating_org_type_Funding"
,"participating_org_type_code_Funding"
,"participating_org_Extending"
,"participating_org_ref_Extending"
,"participating_org_type_Extending"
,"participating_org_type_code_Extending"
,"participating_org_Implementing"
,"participating_org_ref_Implementing"
,"participating_org_type_Implementing"
,"participating_org_type_code_Implementing"
,"recipient_country_code"
,"recipient_country"
,"recipient_country_percentage"
,"recipient_region_code"
,"recipient_region"
,"recipient_region_percentage"
,"sector_code"
,"sector"
,"sector_percentage"
,"sector_vocabulary"
,"sector_vocabulary_code"
,"collaboration_type_code"
,"default_finance_type_code"
,"default_flow_type_code"
,"default_aid_type_code"
,"default_tied_status_code"
,"default_currency"
,"currency"
,"total_Commitment"
,"total_Disbursement"
,"total_Expenditure"
,"total_IncomingFunds"
,"total_InterestRepayment"
,"total_LoanRepayment"
,"total_Reimbursement"
)
iati.field.types=c(
"text"
,"integer"
,"text"
,"text"
,"text"
,"text"
,"text"
,"integer"
,"text"
,"text"
,"integer"
,"text"
,"text"
,"text"
,"text"
,"text"
,"integer"
,"text"
,"integer"
,"text"
,"text"
,"text"
,"integer"
,"text"
,"text"
,"text"
,"integer"
,"text"
,"text"
,"text"
,"integer"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"text"
,"integer"
,"integer"
,"integer"
,"text"
,"text"
,"text"
,"text"
,"float8"
,"float8"
,"float8"
,"float8"
,"integer"
,"integer"
,"integer"
)
iati.field.types = rep("text",56)
total_count = fromJSON("http://datastore.iatistandard.org/api/1/access/activity?limit=0")["total-count"][[1]]
index = 0
url_con = curl(base_url)
open(url_con, "r")
pb = txtProgressBar(max=total_count, style=3)
while(isIncomplete(url_con)){
dataChunk = read.csv(url_con, nrows=chunk.size, skip=0, header=(index==0), col.names=iati.col.names, as.is=T, na.strings=c(""))
dbWriteTable(con, name = table.quote, value = dataChunk, row.names = F, overwrite=(index==0), append=(index>0), field.types=iati.field.types)
index = index + nrow(dataChunk)
setTxtProgressBar(pb, index)
rm(dataChunk)
}
names(dataChunk)
dataChunk = read.csv(url_con, nrows=chunk.size, skip=0, header=(index==0), col.names=iati.col.names, as.is=T, na.strings=c(""))
list.of.packages <- c("data.table", "here", "RPostgreSQL","jsonlite","curl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.us.r-project.org")
lapply(list.of.packages, require, character.only=T)
version
list.of.packages <- c("sp","rgdal","leaflet","data.table","ggplot2","scales","rgeos","maptools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
list.of.packages <- c("sp","rgdal","leaflet","data.table","ggplot2","scales","rgeos","maptools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
setwd("~/git/map_for_amy")
list.of.packages <- c("sp","rgdal","leaflet","data.table","ggplot2","scales","rgeos","maptools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
setwd("~/git/map-for-amy")
ke = readOGR("data/kenya/kenya.shp")
ke = readOGR("source_data/kenya/kenya.shp")
View(ke@data)
# And you can preview the shapes with a simple plot
plot(ke)
list.of.packages <- c("sp","rgdal","leaflet","data.table","ggplot2","scales","rgeos","maptools","openxlsx")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
activities = read.xlsx("20190613 - Initial d-portal download.xlsx")
activities = read.xlsx("source_data/20190613 - Initial d-portal download.xlsx")
View(activities)
coordinates(activities)=~location_longitude+location_latitude
points(activities)
names(ke@data)
proj4string(activities) = proj4string(ke)
over_dat = over(activities,ke)
over_dat = over(ke,activities)
View(over_dat)
over_dat = over(activities,ke)
View(over_dat)
names(activities@data)
over_tab = data.table(over_dat)[,.(commitment=sum(commitment,na.rm=T)),by=.(ID_2)]
names(over_dat)
list.of.packages <- c("sp","rgdal","leaflet","data.table","ggplot2","scales","rgeos","maptools","openxlsx")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
setwd("~/git/map-for-amy")
ke = readOGR("source_data/kenya/kenya.shp")
activities = read.xlsx("source_data/20190613 - Initial d-portal download.xlsx")
coordinates(activities)=~location_longitude+location_latitude
proj4string(activities) = proj4string(ke)
over_dat = over(activities,ke)
over_dat$commitment = activities$commitment
over_tab = data.table(over_dat)[,.(commitment=sum(commitment,na.rm=T)),by=.(ID_2)]
View(over_tab)
ke = merge(ke,over_tab,by="ID_2",all.x=T)
View(ke@data)
quantile(ke@data$commitment,seq(0,1,0.2))
# Let the palette
pal <- colorBin(
palette = "YlOrRd",
domain = ke@data[,"commitment"],
na.color="#d0cccf",
bins = c(150000000,500000000,900000000,1500000000,2000000000,25000000000)
)
names(ke)
View(ke@data)
names(activities)
unique(activities@data$location_name)
names(activities)
unique(activities@data$aid)
names(activities)
unique(activities@data$status_code)
unique(activities@data$day_start)
as.Date(unique(activities@data$day_start))
as.POSIXlt(39436)
as.POSIXlt(39436,origin=as.Date("01-01-1970"))
as.Date(as.POSIXlt(39436,origin=as.Date("01-01-1970")))
as.Date(as.POSIXlt(activites@data$day_start,origin=as.Date("01-01-1970")))
activities = read.xlsx("source_data/20190613 - Initial d-portal download.xlsx")
coordinates(activities)=~location_longitude+location_latitude
proj4string(activities) = proj4string(ke)
as.Date(as.POSIXlt(activites@data$day_start,origin=as.Date("01-01-1970")))
as.Date(as.POSIXlt(activities@data$day_start,origin=as.Date("01-01-1970")))
unique(as.Date(as.POSIXlt(activities@data$day_start,origin=as.Date("01-01-1970"))))
unique(activities@data$day_start)
as.Date("01-01-1970")+activities@data$day_start
?as.Date
as.Date("1970-01-01")+activities@data$day_start
as.Date(as.POSIXlt(activities@data$day_start,origin=as.Date("1970-01-01")))
as.Date("1970-01-01")+activities@data$day_start
activities@data$day_start
names(activities)
paste0(
"<b>Title: </b>",activities@data$title,"<br/>",
"<b>Status: </b>",activities@data$status_code,"<br/>",
"<b>Sector: </b>",activities@data$sector_code,"<br/>",
"<b>Location precision: </b>",activities@data$location_precision,"<br/>",
"<b>Location name: </b>",activities@data$location_name,"<br/>",
"<b>D-portal link: </b><a href='",activities@data$aid,"'>Click here</a><br/>",
"<b>Commitment USD: </b>$",round(activities@data$commitment),"<br/>"
)
list.of.packages <- c("sp","rgdal","leaflet","data.table","ggplot2","scales","rgeos","maptools","openxlsx")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
setwd("~/git/map-for-amy")
ke = readOGR("source_data/kenya/kenya.shp")
activities = read.xlsx("source_data/20190613 - Initial d-portal download.xlsx")
coordinates(activities)=~location_longitude+location_latitude
proj4string(activities) = proj4string(ke)
over_dat = over(activities,ke)
over_dat$commitment = activities$commitment
over_tab = data.table(over_dat)[,.(commitment=sum(commitment,na.rm=T)),by=.(ID_2)]
ke = merge(ke,over_tab,by="ID_2",all.x=T)
# Let the palette
pal <- colorBin(
palette = "YlOrRd",
domain = ke@data[,"commitment"],
na.color="#d0cccf",
bins = c(150000000,500000000,900000000,1500000000,2000000000,25000000000)
)
# You may need to highlight all lines at once to get this to run
leaflet(data=ke) %>%
setView(33, 1, zoom=6) %>%
addPolygons(color = pal(ke@data[,"commitment"])
,fillOpacity = 1
,stroke=F
,smoothFactor=0.2
,popup=paste0(
"<b>District name</b>: ",ke@data$NAME_2,"<br/>",
"<b>Sum of commitments (USD): </b>$",round(ke@data$commitment),"<br/>"
)) %>%
addPolylines(
color="#eeeeee",
weight=0.5,
opacity=1,
smoothFactor=0.2) %>%
addMarkers(
data=activities
,popup=paste0(
"<b>Title: </b>",activities@data$title,"<br/>",
"<b>Status: </b>",activities@data$status_code,"<br/>",
"<b>Sector: </b>",activities@data$sector_code,"<br/>",
"<b>Location precision: </b>",activities@data$location_precision,"<br/>",
"<b>Location name: </b>",activities@data$location_name,"<br/>",
"<b>D-portal link: </b><a href='",activities@data$aid,"'>Click here</a><br/>",
"<b>Commitment (USD): </b>$",round(activities@data$commitment),"<br/>"
)
) %>%
addLegend(
"bottomright"
, pal=pal
, values = ke@data[,"commitment"]
, opacity = 1
, title="Sum of commitments (USD)"
,labFormat = labelFormat(suffix="$")
,na.label = "0/no data"
)
